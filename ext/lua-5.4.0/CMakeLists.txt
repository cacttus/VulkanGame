# 
# Post: LUA_TARGET_NAME - name of lua project.
#       LUA_LIBRARIES - name of lua lib
set(LUA_TARGET_NAME lua)
set(LUA_VERSION 5.4)
project(${LUA_TARGET_NAME})

set(LUA_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/)
file(GLOB_RECURSE LUA_SOURCE_FILES ${LUA_INCLUDE_DIR} *.cpp *.c)
file(GLOB_RECURSE LUA_HEADER_FILES ${LUA_INCLUDE_DIR} *.h *.hpp)

add_library(${LUA_TARGET_NAME} ${LUA_SOURCE_FILES} ${LUA_HEADER_FILES})

target_include_directories(${LUA_TARGET_NAME} PUBLIC ${LUA_INCLUDE_DIR})

get_arch_config()
set(LUA_OUTPUT_NAME ${LUA_TARGET_NAME}${ARCH_CONFIG})
message("Output: " ${LUA_OUTPUT_NAME})
set_target_properties(${LUA_TARGET_NAME} PROPERTIES OUTPUT_NAME ${LUA_OUTPUT_NAME}
  RUNTIME_OUTPUT_DIRECTORY_DEBUG ${VG_LIB_DIR}
  RUNTIME_OUTPUT_DIRECTORY_RELEASE ${VG_LIB_DIR}
  RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${VG_LIB_DIR}
  RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${VG_LIB_DIR}
  ARCHIVE_OUTPUT_DIRECTORY ${VG_LIB_DIR}
) 

set(ADDL_LIBS "")
if(CMAKE_COMPILER_IS_GNUCXX OR MINGW OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    set(GCC_LINK_GLOBAL -pthread) 
    set(GCC_COMPILE_GLOBAL "")
    target_compile_options(${LUA_TARGET_NAME} PRIVATE "$<$<CONFIG:DEBUG>:" ${GCC_COMPILE_GLOBAL} -D_DEBUG -D_GLIBCXX_DEBUG ">")
    target_compile_options(${LUA_TARGET_NAME} PRIVATE "$<$<CONFIG:RELEASE>:" ${GCC_COMPILE_GLOBAL} -Ofast ">")

    target_link_options(${LUA_TARGET_NAME} PRIVATE "$<$<CONFIG:DEBUG>:" ${GCC_LINK_GLOBAL} ">")
    target_link_options(${LUA_TARGET_NAME} PRIVATE "$<$<CONFIG:RELEASE>:" ${GCC_LINK_GLOBAL} ">")

endif()
target_link_libraries(${LUA_TARGET_NAME} PRIVATE ${ADDL_LIBS})

# Set this for the parent.
set(LUA_LIBRARIES ${LUA_OUTPUT_NAME} PARENT_SCOPE)
set(LUA_TARGET_NAME ${LUA_TARGET_NAME} PARENT_SCOPE)
set(LUA_INCLUDE_DIR ${LUA_INCLUDE_DIR} PARENT_SCOPE)
